defmodule Moba.Admin.Skins do
  @moduledoc """
  Admin functions for managing Skins, mostly generated by Torch package.
  """

  alias Moba.{Repo, Game}
  alias Game.Schema.Skin

  import Ecto.Query, warn: false
  import Torch.Helpers, only: [sort: 1, paginate: 4]
  import Filtrex.Type.Config

  @pagination [page_size: 50]
  @pagination_distance 5

  def paginate(params \\ %{}) do
    params =
      params
      |> Map.put_new("sort_direction", "desc")
      |> Map.put_new("sort_field", "inserted_at")

    {:ok, sort_direction} = Map.fetch(params, "sort_direction")
    {:ok, sort_field} = Map.fetch(params, "sort_field")

    with {:ok, filter} <- Filtrex.parse_params(filter_config(:skins), params["skin"] || %{}),
         %Scrivener.Page{} = page <- do_paginate(filter, params) do
      {:ok,
       %{
         skins: page.entries,
         page_number: page.page_number,
         page_size: page.page_size,
         total_pages: page.total_pages,
         total_entries: page.total_entries,
         distance: @pagination_distance,
         sort_field: sort_field,
         sort_direction: sort_direction
       }}
    else
      {:error, error} -> {:error, error}
      error -> {:error, error}
    end
  end

  def list do
    Repo.all(Skin)
  end

  def get!(id), do: Repo.get!(Skin, id)

  def create(attrs \\ %{}) do
    %Skin{}
    |> Skin.changeset(attrs)
    |> Repo.insert()
  end

  def update(%Skin{} = skin, attrs) do
    skin
    |> Skin.changeset(attrs)
    |> Repo.update()
  end

  def delete(%Skin{} = skin) do
    Repo.delete(skin)
  end

  def change(%Skin{} = skin) do
    Skin.changeset(skin, %{})
  end

  defp do_paginate(filter, params) do
    Skin
    |> Filtrex.query(filter)
    |> order_by(^sort(params))
    |> paginate(Repo, params, @pagination)
  end

  defp filter_config(:skins) do
    defconfig do
      text(:name)
      text(:code)
      text(:avatar_code)
      number(:league_tier)
    end
  end
end
